generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  passwordHash  String
  role          Role
  walletAddress String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  organisations  Organisation[] @relation("UserOrganisations")
  addedMembers   OrgMember[]    @relation("UserAddedMembers")
  createdStreams Stream[]       @relation("UserCreatedStreams")
  invoices       Invoice[]      @relation("UserInvoices")
  session        Session?
  orgMember      OrgMember?     @relation("UserOrgMember", fields: [orgMemberId], references: [id])
  orgMemberId    String?
}

model Organisation {
  id        String   @id @default(uuid())
  name      String   @unique
  ownerId   String
  createdAt DateTime @default(now())

  owner    User        @relation("UserOrganisations", fields: [ownerId], references: [id])
  members  OrgMember[] @relation("OrganisationMembers")
  streams  Stream[]    @relation("OrganisationStreams")
  invoices Invoice[]   @relation("OrganisationInvoices")
}

model OrgMember {
  id            String   @id @default(uuid())
  memberId      String
  orgId         String
  walletAddress String?
  role          Role
  addedById     String
  createdAt     DateTime @default(now())

  organisation    Organisation @relation("OrganisationMembers", fields: [orgId], references: [id])
  addedBy         User         @relation("UserAddedMembers", fields: [addedById], references: [id])
  receivedStreams Stream[]     @relation("StreamReceivers")
  invoices        Invoice[]    @relation("OrgMemberInvoices")
  member          User[]       @relation("UserOrgMember")

  @@unique([orgId, memberId])
}

model Token {
  id          String @id @default(uuid())
  symbol      String
  mintAddress String
  chain       String
  decimals    Int

  streams Stream[] @relation("TokenStreams")
}

model Stream {
  id          String   @id @default(uuid())
  orgId       String
  createdById String
  receiverId  String
  tokenId     String
  amount      BigInt
  cliffAmount BigInt
  startTime   DateTime
  cliffTime   DateTime
  interval    Int
  status      String
  onChainId   String
  invoiceId   String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  organisation Organisation @relation("OrganisationStreams", fields: [orgId], references: [id])
  owner        User         @relation("UserCreatedStreams", fields: [createdById], references: [id])
  receiver     OrgMember    @relation("StreamReceivers", fields: [receiverId], references: [id])
  token        Token        @relation("TokenStreams", fields: [tokenId], references: [id])
  invoice      Invoice?     @relation("InvoiceToStream", fields: [invoiceId], references: [id])
}

model Invoice {
  id             String   @id @default(uuid())
  organisationId String?
  userId         String?
  memberId       String?
  currency       String
  amount         Float
  status         String
  dueDate        DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organisation Organisation? @relation("OrganisationInvoices", fields: [organisationId], references: [id])
  user         User?         @relation("UserInvoices", fields: [userId], references: [id])
  member       OrgMember?    @relation("OrgMemberInvoices", fields: [memberId], references: [id])
  stream       Stream?       @relation("InvoiceToStream")
}

model Session {
  id           String   @id @default(uuid())
  userId       String   @unique
  refreshToken String
  expiresAt    DateTime

  user User @relation(fields: [userId], references: [id])
}

enum Role {
  ADMIN
  USER
}
